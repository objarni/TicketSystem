A brief description of what I did and why.

First half hour was setting up environment so that I could run the project/tests on my Mac with Rider on it.

The current solution is using .NET6.0.

Then, I spent 1 hour on doing small, safe refactorings using Arlo Belshee's commit notation. See https://github.com/RefactoringCombos/ArlosCommitNotation

I call this style of refactoring "programming in the small".

After that start, I thought "I'd like to do some larger refactorings, so I need some tests".

For untested / legacy code, I prefer to use Approval Tests. So I went ahead and started writing a regression test / shield for the TicketService.CreateTicket method, since it was the biggest and most meaty one :)

That turned out to be tricky, since both the UserRepository crashed on creation, and DateTime.Now has side effects. It took quite some effort to get the code coverage up on the method, and I basically spent the rest of the time putting that safety net in place.

- What did I like?
I liked the exercise, I havent' seen a refactoring exercise as the test for a developer job before! I think this is really good, and much better than "solve this or that problem really quickly"-kinds-of-tests. Kudos!
I also liked that it was actually a challenging refactoring exercise, not some "side effect free" code kata style problem.
I liked that I started out with PITS and safe refactorings, this felt value-quick and I gained some insight on the "domain" of the problem just by doing this.

- What would I do differently?
I think I would probably have spent more time on moving out the undeterministic behaviour in the CreateTicket method, before trying approvals. A simple unit test would (probably) have sufficed, together with some eye inspection.
I would have liked to get into a place of actually transforming the CreateTicket to some value objects and functions, separating the concerns and going more functional in style (I was really tempted to start doing that in the middle of the exercise, but stilled the temptation. E.g I would have liked a pure function figuring out the Priority from inputs like Priority, Title and time-diff. Those unit tests would have been a breeze to write / maintain, compared to the monster that is the combation approval test! The regression unit test is a throw-away thing so I'm not particularly "craftmanship"-focused when writing such shields. Cover your eyes! :D


Thanks!


/Olof

